{
  "name": "OpenAI - Swiggy Order Email to Google Sheets -",
  "nodes": [
    {
      "parameters": {},
      "id": "70da4f01-185a-4a92-b5bf-76c3acbddd7c",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2240,
        16
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "messageId": "={{ $json.id }}",
        "simple": false,
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1744,
        -96
      ],
      "id": "227014b4-c0cc-40a3-8391-559a5ce2687b",
      "name": "Get Whole Email",
      "webhookId": "16aa2fbc-0128-4c29-9b3a-932f607c3e5b",
      "credentials": {
        "gmailOAuth2": {
          "id": "OWwmMyMSappHU2eW",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 3,
        "filters": {
          "q": "from:(noreply@swiggy.in) (subject:order OR subject:Instamart OR subject:gourmet)",
          "readStatus": "both"
        }
      },
      "id": "5a56ba45-3688-4633-9a71-0981a0fec5c8",
      "name": "Gmail - Get MessageIDs",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        -1968,
        -96
      ],
      "webhookId": "4ccd72da-86d5-4732-b29e-a94d9c2cf84c",
      "credentials": {
        "gmailOAuth2": {
          "id": "OWwmMyMSappHU2eW",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  {\n    \"restaurantName\": \"MTR - Lalbagh Road\",\n    \"date\": \"Saturday, October 11, 2025 12:15 PM\",\n    \"type\": \"Food\",\n    \"orderId\": \"219136361600127\",\n    \"orderTotal\": \"420.00\",\n    \"discount\": \"20.00\",\n    \"packagingCharges\": \"15.00\",\n    \"platformFee\": \"9.99\",\n    \"deliveryFee\": \"0.00\",\n    \"taxes\": \"21.00\",\n    \"orderTotalFinal\": \"445.99\"\n  },\n  {\n    \"restaurantName\": \"Nagarjuna - Since 1984\",\n    \"date\": \"Saturday, October 11, 2025 1:05 PM\",\n    \"type\": \"Food\",\n    \"orderId\": \"219136361600238\",\n    \"orderTotal\": \"800.00\",\n    \"discount\": \"80.00\",\n    \"packagingCharges\": \"40.00\",\n    \"platformFee\": \"14.99\",\n    \"deliveryFee\": \"0.00\",\n    \"taxes\": \"42.00\",\n    \"orderTotalFinal\": \"816.99\"\n  },\n  {\n    \"restaurantName\": \"Shivaji Military Hotel\",\n    \"date\": \"Saturday, October 11, 2025 7:18 PM\",\n    \"type\": \"Food\",\n    \"orderId\": \"219136361600349\",\n    \"orderTotal\": \"950.00\",\n    \"discount\": \"100.00\",\n    \"packagingCharges\": \"35.00\",\n    \"platformFee\": \"12.00\",\n    \"deliveryFee\": \"25.00\",\n    \"taxes\": \"45.00\",\n    \"orderTotalFinal\": \"967.00\"\n  }\n]\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1344,
        176
      ],
      "id": "67395465-75ed-4bf3-b2e0-870ab94a4f66",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Take in the email body here {{ $json.html }} and extract the following values for the Swiggy Food order:\n\nrestaurantName: Restaurant Name or variations of it\ndate: based on when the email was received or mentioned in the email\ntype: Food ('Delivery' or 'delivery' and none of 'dineout' or 'instamart' in email subject), Dineout (if email subject mentions'Dineout') or Instamart (if email subject mentions'Instamart')\norderId: Order Id\norderTotal: Item Total\ndiscount: Discount\npackagingCharges: Packaging Charges\nplatformFee: Platform Fee\ndeliveryFee: Delivery Fee\ntaxes: Taxes\norderTotalFinal: Order Total Final\n\nOutput just the data in flat json without markdowns without any greeting or chit-chat",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1520,
        -96
      ],
      "id": "56a38cf8-7293-440a-90c6-68ab4a067b80",
      "name": "AI Email Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-haiku-4-5-20251001",
          "mode": "list",
          "cachedResultName": "Claude Haiku 4.5"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        -1280,
        400
      ],
      "id": "d7dc07e5-4c0d-4a8f-a43d-94051b1c1ea0",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "ev6vDvMk04Dpj0vj",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1YB5ewnWBerLdMe_tPWQqY1HSxx9qqHTjGZGcJgRYrGw/edit?usp=sharing",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1YB5ewnWBerLdMe_tPWQqY1HSxx9qqHTjGZGcJgRYrGw/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Restaurant": "={{ $json.restaurantName }}\n",
            "Date & Time": "={{ DateTime.fromFormat($('Get Whole Email').item.json.headers.received.match(/(Sun|Mon|Tue|Wed|Thu|Fri|Sat), \\d{1,2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} [+-]\\d{4}/)[0], 'EEE, dd MMM yyyy HH:mm:ss ZZZ').toFormat('EEEE, LLLL d, yyyy HH:mm') }}",
            "Type": "={{ $json.type }}",
            "Item Total": "={{ ($json.orderTotal + '').replace(/[^\\d.]/g, '') }}",
            "Order Id": "={{ $json.orderId }}",
            "Discount": "={{ ($json.discount + '').replace(/[^\\d.]/g, '') }}",
            "Packaging Charges": "={{ ($json.packagingCharges + '').replace(/[^\\d.]/g, '') }}",
            "Platform Fee": "={{ ($json.platformFee + '').replace(/[^\\d.]/g, '') }}",
            "Delivery Fee": "={{ ($json.deliveryFee + '').replace(/[^\\d.]/g, '') }}",
            "Taxes": "={{ ($json.taxes + '').replace(/[^\\d.]/g, '') }}",
            "Order Total Final": "={{ ($json.orderTotalFinal + '').replace(/[^\\d.]/g, '') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Restaurant",
              "displayName": "Restaurant",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Date & Time",
              "displayName": "Date & Time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Type",
              "displayName": "Type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Order Id",
              "displayName": "Order Id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Item Total",
              "displayName": "Item Total",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Discount",
              "displayName": "Discount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Packaging Charges",
              "displayName": "Packaging Charges",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Platform Fee",
              "displayName": "Platform Fee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Delivery Fee",
              "displayName": "Delivery Fee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Taxes",
              "displayName": "Taxes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Order Total Final",
              "displayName": "Order Total Final",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -784,
        -96
      ],
      "id": "6cc6a355-329f-4925-98c8-636e78ac8614",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "lPrwxaxIYjfo4cAu",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1520,
        192
      ],
      "id": "976f9b56-a0d1-4304-ab8b-f08673337756",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "RjH01q4UdpVNJcqa",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-oss:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -1440,
        400
      ],
      "id": "16962f01-ff9b-4f7f-a7a8-695b9a529327",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "kyJoOVbyW7kfiGVO",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Helper to parse messy/escaped/embedded JSON output from AI\nfunction safeParse(input) {\n  // Try direct first\n  try {\n    return JSON.parse(input);\n  } catch {}\n  // Try to clean up if it's a stringified array/stringified object\n  try {\n    const fixed = input\n      .replace(/\\\\\"/g, '\"') // Unescape quotes\n      .replace(/\\\\n/g, '')  // Remove newlines\n      .replace(/\\\\t/g, '')  // Remove tabs\n      .replace(/\"\"/g, '\"'); // Remove redundant double quotes\n    return JSON.parse(fixed);\n  } catch {}\n  // Try extracting just the array portion\n  if (typeof input === 'string') {\n    const arrStart = input.indexOf('[');\n    const arrEnd = input.lastIndexOf(']');\n    if (arrStart > -1 && arrEnd > arrStart) {\n      try {\n        const justArray = input.substring(arrStart, arrEnd + 1)\n          .replace(/\\\\\"/g, '\"').replace(/\\\\n/g, '').replace(/\\\\t/g, '').replace(/\"\"/g, '\"');\n        return JSON.parse(justArray);\n      } catch {}\n    }\n  }\n  throw new Error(\"Failed to parse array from input: \" + input);\n}\n\n// Get all outputs from AI Email Parser in this run (usually one per item)\nlet allOrders = [];\nfor (const item of items) {\n  let raw = item.json.output || item.json.text || item.json.data || item.json;\n  if (Array.isArray(raw)) {\n    allOrders.push(...raw);\n  } else if (typeof raw === 'object') {\n    allOrders.push(raw);\n  } else if (typeof raw === 'string') {\n    const result = safeParse(raw);\n    if (Array.isArray(result)) {\n      allOrders.push(...result);\n    } else if (result) {\n      allOrders.push(result);\n    }\n  }\n}\n\n// Final safety filter: flatten and remove falsy\nallOrders = allOrders.flat().filter(Boolean);\n\n// Return each object as an item (required by Google Sheet Append node)\nreturn allOrders.map(entry => ({ json: entry }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1184,
        -96
      ],
      "id": "fb02b0f2-f9c9-4338-beb8-fe376ff0cb13",
      "name": "Clean JSON"
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "hour": 1,
              "minute": 30
            }
          ]
        }
      },
      "id": "1f2e23c1-a05d-49a8-b8e2-b2ea872a00a0",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -2240,
        -192
      ],
      "retryOnFail": true,
      "maxTries": 2
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Gmail - Get MessageIDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Whole Email": {
      "main": [
        [
          {
            "node": "AI Email Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail - Get MessageIDs": {
      "main": [
        [
          {
            "node": "Get Whole Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Email Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "AI Email Parser": {
      "main": [
        [
          {
            "node": "Clean JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Email Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Clean JSON": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Gmail - Get MessageIDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "availableInMCP": false,
    "errorWorkflow": "m4nOmq18tuiageov"
  },
  "versionId": "b9f239df-fe20-44f7-8550-a45bf3526a43",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "de7af53d1fd674f87fce9ce003d7e943eb515ee668ad66f5ecf504579bf54cb8"
  },
  "id": "PFFWCzRnaRc420D9",
  "tags": [
    {
      "createdAt": "2025-10-10T14:39:58.978Z",
      "updatedAt": "2025-10-10T14:39:58.978Z",
      "id": "07rnm7TzeFnkz5go",
      "name": "Google Sheets"
    },
    {
      "createdAt": "2025-10-10T14:58:00.196Z",
      "updatedAt": "2025-10-10T14:58:00.196Z",
      "id": "6zkKWlXIWybyTg56",
      "name": "Email Processing"
    },
    {
      "createdAt": "2025-10-10T14:39:58.974Z",
      "updatedAt": "2025-10-10T14:39:58.974Z",
      "id": "Pv0po7IstVjvyCjh",
      "name": "Swiggy Orders"
    },
    {
      "createdAt": "2025-10-10T14:58:00.189Z",
      "updatedAt": "2025-10-10T14:58:00.189Z",
      "id": "VHGW1ZODYIUTvLx8",
      "name": "Self-Hosted Automation"
    },
    {
      "createdAt": "2025-10-10T14:39:58.950Z",
      "updatedAt": "2025-10-10T14:39:58.950Z",
      "id": "wyi2QCz6rOfoyrNo",
      "name": "Email Automation"
    }
  ]
}